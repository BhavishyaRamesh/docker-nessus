name: Build and Deploy Microservice APIs

on:
  push:
    branches: dev_authorization

jobs:
   sonarqube-notification:
    name: SonarQube and Jest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x ]
    steps:
     - uses: actions/checkout@v2
       with:
          fetch-depth: 0
     - uses: sonarsource/sonarqube-scan-action@master
       env:
           SONAR_TOKEN: c4c23f5afb4724bdd905e6eeee59660175449a17
           SONAR_HOST_URL: https://8028-103-137-2-59.ngrok.io
           PROJECT_KEY: WSL-Arc-poc 
    
     - name: Use Node.js ${{ matrix.node-version }}
       uses: actions/setup-node@v2
       with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
     - run: npm i
     - run: npm install -g eslint
     - run: eslint . --ext .js,.jsx,.ts,.tsx
     - name: Build
       run: npm run build
       env:
          CI: false
     #- run: npm test integration
     
     - name: Upload Artifact
       uses: actions/upload-artifact@v2
       with:
          name: build
          path: build
     
     
     - name: Send mail
       if: always()
       uses: dawidd6/action-send-mail@v2
       with:
    # mail server settings
         server_address: smtp.office365.com
         server_port: 587
         secure: false
         secureConnection: false
    # user credentials
         username: ${{ secrets.EMAIL_USERNAME }}
         password: ${{ secrets.EMAIL_PASSWORD }}
    # email subject
         subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
    # email body as text
         body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}
    # comma-separated string, send email to
         to: abirami.a@worksitelabs.com , kcsantosh@worksitelabs.com , pkumar@worksitelabs.com , krishna@worksitelabs.com , lokesh@worksitelabs.com , vijayr@worksitelabs.com,dkumari@worksitelabs.com
    # from email name
         from: OMHealth 
#   setup-deploy:
#     name: Setup and Deploy 
#     runs-on: ubuntu-latest
#     needs: [ sonarqube-notification ]
#     env:
#          IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}
#     steps:
#     - name: Checkout Repo
#       uses: actions/checkout@v3

#     - id: 'auth'
#       uses: 'google-github-actions/auth@v0'
#       with:
#          credentials_json: '${{ secrets.GCP_SA_KEY }}'
    
#     - name: 'Deploy to Cloud Run'
#       uses: 'google-github-actions/deploy-cloudrun@v0'
#       with:
#          service: '${{ secrets.GCP_APP_NAME }}'
#          image: '${{ env.IMAGE_NAME }}'
#          flags: --allow-unauthenticated
#     - id: latest
#       if: failure()
#       uses: thebritican/fetch-latest-release@v1.0.3
#       with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}

#     - uses: actions/checkout@v2
#       if: failure()
#       with: 
#          ref: ${{ steps.latest.outputs.tag_name }}         
    
#     - id: create_release
#       if: failure()
#       uses: actions/create-release@v1.0.0
#       env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#          tag_name: ${{ steps.latest.outputs.tag_name }}
#          release_name: ${{ steps.latest.outputs.tag_name }}
#          draft: true
#          prerelease: true
   create-release:
     name: Download-artifact
     runs-on: ubuntu-latest 
     needs: [ sonarqube-notification ]
     steps:
     - name: Download Artifacts
       uses: actions/download-artifact@v3
       with:
           name: build
           path: build   
     - name: Test-artifact
       run: ls -R
 
     - id: create-new-release
       uses: actions/create-release@v1
       env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
          tag_name: v0.0.${{ github.run_number }}
          release_name: Release V0.0.${{ github.run_number }}
